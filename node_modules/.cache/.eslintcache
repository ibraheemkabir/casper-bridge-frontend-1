[{"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx":"1","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/reportWebVitals.ts":"2","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx":"3","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts":"4","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx":"5","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts":"6","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts":"7","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts":"8","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx":"9","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx":"10","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx":"11","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts":"12","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts":"13","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts":"14","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts":"15","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts":"16","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts":"17","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts":"18","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts":"19","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx":"20","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx":"21","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx":"22","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx":"23","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts":"24","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx":"25","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts":"26","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts":"27","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx":"28","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts":"29","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts":"30","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts":"31","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts":"32","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts":"33","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts":"34"},{"size":755,"mtime":1691447106011,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1688388176135,"results":"37","hashOfConfig":"36"},{"size":868,"mtime":1691509953563,"results":"38","hashOfConfig":"36"},{"size":1219,"mtime":1703678328386,"results":"39","hashOfConfig":"36"},{"size":742,"mtime":1703678328382,"results":"40","hashOfConfig":"36"},{"size":1944,"mtime":1703678328385,"results":"41","hashOfConfig":"36"},{"size":2502,"mtime":1688388176131,"results":"42","hashOfConfig":"36"},{"size":133,"mtime":1688388176127,"results":"43","hashOfConfig":"36"},{"size":9279,"mtime":1705768974628,"results":"44","hashOfConfig":"36"},{"size":7085,"mtime":1703678328384,"results":"45","hashOfConfig":"36"},{"size":22512,"mtime":1705769003666,"results":"46","hashOfConfig":"36"},{"size":729,"mtime":1688388176129,"results":"47","hashOfConfig":"36"},{"size":197,"mtime":1688388176130,"results":"48","hashOfConfig":"36"},{"size":285,"mtime":1688388176127,"results":"49","hashOfConfig":"36"},{"size":1981,"mtime":1703678328385,"results":"50","hashOfConfig":"36"},{"size":3472,"mtime":1703669294441,"results":"51","hashOfConfig":"36"},{"size":1297,"mtime":1689599604043,"results":"52","hashOfConfig":"36"},{"size":238,"mtime":1703669294442,"results":"53","hashOfConfig":"36"},{"size":436,"mtime":1703669097777,"results":"54","hashOfConfig":"36"},{"size":4938,"mtime":1703669294437,"results":"55","hashOfConfig":"36"},{"size":1184,"mtime":1688388176133,"results":"56","hashOfConfig":"36"},{"size":830,"mtime":1688388176133,"results":"57","hashOfConfig":"36"},{"size":1536,"mtime":1702920575448,"results":"58","hashOfConfig":"36"},{"size":879,"mtime":1702998719191,"results":"59","hashOfConfig":"36"},{"size":7216,"mtime":1703678328383,"results":"60","hashOfConfig":"36"},{"size":3719,"mtime":1688388176128,"results":"61","hashOfConfig":"36"},{"size":2243,"mtime":1689599604041,"results":"62","hashOfConfig":"36"},{"size":4642,"mtime":1703678328383,"results":"63","hashOfConfig":"36"},{"size":690,"mtime":1688388176130,"results":"64","hashOfConfig":"36"},{"size":2122,"mtime":1688388176127,"results":"65","hashOfConfig":"36"},{"size":3934,"mtime":1688388176127,"results":"66","hashOfConfig":"36"},{"size":2122,"mtime":1688388176131,"results":"67","hashOfConfig":"36"},{"size":812,"mtime":1689596068552,"results":"68","hashOfConfig":"36"},{"size":228,"mtime":1688388176132,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n64v76",{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/reportWebVitals.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx",["182","183"],[],"import React from \"react\";\n// import logo from \"./assets/images/logo-light.svg\";\n\nimport { FLayout, FMain, FContainer } from \"ferrum-design-system\";\n// å// import { ReactComponent as IconNetwork } from \"./assets/images/Icon-connect-network.svg\";\nimport BaseRoutes from \"./Routes\";\nimport { Toaster } from \"react-hot-toast\";\nimport Header from \"./header/header\";\nimport { WalletApplicationWrapper } from \"./components/connector\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WalletApplicationWrapper.ApplicationWrapper>\n        <Toaster position=\"top-right\" />\n        <FLayout themeBuilder={false} FsiderLayoutState={true}>\n          <FContainer width={1200} className=\"f-pl-1 f-pr-1\">\n            <BaseRoutes />\n          </FContainer>\n        </FLayout>\n        </WalletApplicationWrapper.ApplicationWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx",["184","185","186","187","188","189","190","191"],[],"import { FTypo, FGrid, FTable, FHeader, FButton } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Datatable from \"react-bs-datatable\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crucibleApi } from \"../client\";\nimport { fetchWithdrawals } from \"../redux/casper/casperActions\";\nimport { Networks } from \"../utils/stringUtils\";\nimport { CasperWithdrawal } from \"../pages/CasperWithdrawal\";\nimport FerrumJson from \"../utils/contract.json\";\n\nimport './layout.scss';\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { MetaMaskConnector } from \"./connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n    CLValueBuilder, \n    decodeBase16, \n    DeployUtil,\n    RuntimeArgs,\n    Signer,\n    CasperClient\n  } from \"casper-js-sdk\";\n  import toast from \"react-hot-toast\";\nimport { useHistory } from \"react-router\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport Web3 from \"web3\";\nimport { networksToChainIdMap } from \"../utils/network\";\n\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const Withdrawals = () => {\n    const { connect: { config, selectedAccount, isWalletConnected, withdrawalItems } } = useSelector((state: any) => state.casper);\n    const { walletAddress, isConnected, networkClient, currentWalletNetwork } = useSelector((state: any) => state.casper.walletConnector);\n    console.log(walletAddress, selectedAccount , currentWalletNetwork)\n    const [loading, setLoading] = useState(false);\n    const [processMsg, setProcessMsg] = useState('');\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const navigate = useHistory();\n\n    const dispatch = useDispatch();\n\n    async function withdrawEvm(id: string, item: any):Promise<any>{\n        //@ts-ignore\n        const networkData = networksToChainIdMap[currentWalletNetwork]\n        const Api = new crucibleApi()\n        await Api.signInToServer(walletAddress)\n            const res = await Api.gatewayApi({\n              \"command\": \"updateEvmAndNonEvmTransaction\",\n               \"data\": {\n                \"id\": id,\n                \"txType\": \"swap\",\n                \"sendNetwork\": `${networkData?.sendCurrencyFormatted || networkData?.sendNetwork || 'BSC_TESTNET'}`,\n                \"used\": \"\",\n                \"user\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n                \"sendAddress\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n                \"receiveAddress\": \"017fbbccf39a639a1a5f469e3fb210d9f355b532bd786f945409f0fc9a8c6313b1\",\n                \"sendCurrency\": networkData?.sendCurrency || `${networkData.sendNetwork}:0xfe00ee6f00dd7ed533157f6250656b4e007e7179`,\n                \"sendAmount\":  currentWalletNetwork === 1 ? (Number(item.sendAmount) * 1000000) : Web3.utils.toWei(item.sendAmount, 'ether'),\n                \"receiveCurrency\": \"CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473\"\n              },\n              \"params\": []\n            });\n        if (res.data) {\n          const helper = new Web3Helper(networkClient)\n          const tx = await helper.sendTransactionAsync(\n            dispatch,\n            [res.data]\n          )\n          if(tx) {\n            setShowConfirmation(true)\n          }\n        }\n    }    \n\n    const fetchEvmWithdrawalItems = async () => {\n        const Api = new crucibleApi()\n        await Api.signInToServer(`CSPR:${selectedAccount?.address}`)\n        const userWithdrawals = await Api.gatewayApi({\n          command: 'getUserNonEvmWithdrawItems', data: {\n            userAddress: `${selectedAccount?.address}`,\n            network: \"MUMBAI_TESTNET\",\n            receiveAddress: walletAddress,\n        }, params: [] });\n        if (userWithdrawals.data){\n            await fetchWithdrawals(userWithdrawals.data.withdrawableBalanceItems)(dispatch);\n        }\n    }\n\n    const performCasperWithdraw = async (amount: string) => {\n        if (\n          isWalletConnected &&\n          selectedAccount\n        ) {\n          //@ts-ignore\n          const casperWalletProvider = await window.CasperWalletProvider;    \n          const provider = casperWalletProvider();\n          try {\n            // (selectedAccount?.address, Number(amount));\n            const publicKeyHex = selectedAccount?.address;\n            const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n            const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper'\n            );\n\n            const args = RuntimeArgs.fromMap({\n                \"amount\": CLValueBuilder.u256(Number(amount) * 100),\n                \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n              });\n    \n            const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n            'withdraw',\n            args\n            );\n\n            const payment = DeployUtil.standardPayment(10000000000);\n\n            const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n            const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n            provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n                const signedDeploy = DeployUtil.setSignature(\n                  deploy,\n                  signedDeployJson.signature,\n                  CLPublicKey.fromHex(publicKeyHex)\n                );\n\n                if (signedDeploy) {\n                    const res = await casperClient.putDeploy(signedDeploy);\n                    console.log(res, 'resres');\n                    if (res) {\n                    \n                    }\n                    setProcessMsg(res)\n                    setLoading(false)\n                    setShowConfirmation(true)\n                }\n            });\n              // navigate.push(`/${config._id}`);\n            //toast.success(`${amount} tokens are staked successfully`);\n            \n            } catch (e) {\n              console.log(\"ERROR : \", e);\n                toast.error(\"An error occured please see console for details\");\n                navigate.push(`/${config._id}`);\n            } finally {\n            //setLoading(false)\n            }\n\n        } else {\n            navigate.push(`/${config._id}`);\n        }\n    };\n        \n\n\n    useEffect(() => {\n       fetchEvmWithdrawalItems()\n    }, [selectedAccount, walletAddress]);\n\n    const tableHeads: any[] = [\n        { width: 200, prop: \"sourceNetwork\", title: \"Source Network\" },\n        { prop: \"targetNetwork\", title: \"Target Network\" },\n        { prop: \"amount\", title: \"Amount\" },\n        { prop: \"action\", title: \"Action\" }\n    ];\n\n\n    const body = (withdrawalItems || []).map((item: any) => { \n        return {\n          amount: <FTypo className={\"col-amount\"}>{item.sendAmount}</FTypo>,\n          sourceNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.sendNetwork] || item.sendNetwork\n        }</FTypo>,\n          targetNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.receiveNetwork] || item.receiveCurrency.split(\":\")[0]\n        }</FTypo>,\n          action: (\n            <div className=\"col-action\">\n            {\n                isConnected\n                ? (<FButton title={\"Withdraw\"} onClick={() => \n                  item?.sendNetwork != '109090' ? \n                  performCasperWithdraw((item.sendAmount).toString()) : withdrawEvm(item.id, item)\n                } />)\n                : (\n                    <MetaMaskConnector.WalletConnector\n                      WalletConnectView={FButton}\n                      WalletConnectModal={ConnectWalletDialog}\n                      isAuthenticationNeeded={false}\n                      WalletConnectViewProps={{ className: \"w-100\" }}\n                    />\n                )\n            }\n            </div>\n          ),\n        }; \n    }); \n\n    return (\n        <>\n            <FGrid alignX={\"center\"} className=\"f-mb-1 withdrawals_container\">\n                <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7\"}>\n                    TOKEN WITHDRAWALS\n                </FTypo>\n                <FTable>\n                    <Datatable tableBody={body || []} tableHeaders={tableHeads} rowsPerPage={10} />\n                </FTable>\n            </FGrid>\n            <ConfirmationDialog\n              onHide={() => {\n                setShowConfirmation(false)\n                setProcessMsg(\"\")\n              }}\n              transaction={processMsg}\n              message={'Transaction sent to network and is processing.'}\n              show={showConfirmation}\n              isSwap={false}\n            />\n            <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n        </>\n    )\n}",[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx",["192","193","194","195","196"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useHistory, useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\nconst STATUS_API = \"https://4211-2a01-4b00-832a-3100-f467-7086-4cda-bb21.eu.ngrok.io/http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { bridgePoolAddress }: any = useParams();\n  const navigate = useHistory();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    await provider?.requestConnection()\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    provider.disconnectFromSite();\n    //@ts-ignore\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n\n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n        \n        console.log(info, 'infoinfo')\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logo} className=\"bg-none\">\n        <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n          {\n            connection?.isWalletConnected && (\n              <>\n                <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                  <span style={{\"cursor\": \"pointer\"}} onClick={() => navigate.push(`/withdraw`)}>My Withdrawals</span>\n                </FItem>\n                <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                  <span style={{\"cursor\": \"pointer\", \"marginRight\": \"1rem\"}} onClick={() => navigate.push(`/liquidity`)}>Add liquidity</span>\n                </FItem>\n              </>\n            )\n          }\n          {connection?.isWalletConnected ? (\n            <>\n              <FButton\n                prefix={CgArrowsExchangeAlt && <CgArrowsExchangeAlt />}\n                onClick={() => {\n                  setShowAddressSelectorDlg(true);\n                }}\n              ></FButton>\n              <FButton\n                className=\"f-mr-1\"\n                title={\"Disconnect Wallet\"}\n                onClick={disconnectWallet}\n                btnInfo={\n                  <FItem display={\"flex\"}>\n                    {IconNetwork && <IconNetwork width={20} /> }\n                    <FTruncateText\n                      className=\"f-ml-1\"\n                      text={connection?.selectedAccount?.address || ''}\n                    />\n                  </FItem>\n                }\n              />\n            </>\n          ) : (\n            <FButton\n              className=\"f-mr-1\"\n              title={\"Connect to Casper Wallet\"}\n              onClick={connectWallet}\n            ></FButton>\n          )}\n          {/* <FHeaderCollapse>\n            <FHeaderMenuItem to=\"/status-page\" title=\"Status Page\" />\n          </FHeaderCollapse> */}\n        </FItem>\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx",["197","198","199","200","201","202","203","204","205","206","207","208","209"],[],"import { useEffect, useState } from \"react\";\nimport { FButton, FCard, FGrid, FGridItem, FInputText, FItem, FTypo } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\nimport { connectWallet, connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { useHistory, useParams } from \"react-router\";\nimport './layout.scss';\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil,\n  RuntimeArgs,\n  Signer,\n  CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport { MetaMaskConnector } from \"../components/connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { crucibleApi } from \"../client\";\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { networksToChainIdMap } from \"../utils/network\";\nimport { setContractHash } from \"../utils/stringParser\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const CasperSwap = () => {\n  const navigate = useHistory();\n  const { bridgePoolAddress }: any = useParams();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [isSwap, setIsSwap] = useState(false);\n  const [amount, setAmount] = useState();\n  const [targetNetwork, setTargetNetwork] = useState('30');\n  const [targetToken, setTargetToken] = useState('Ferrum_Test_Token');\n  const [processMsg, setProcessMsg] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const connection = useSelector((state: any) => state.casper.connect)\n\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, network } } = useSelector((state: any) => state.casper);\n\n  useEffect(() => {\n    //@ts-ignore\n    const casperWalletProvider = window.CasperWalletProvider;  \n    const provider = casperWalletProvider();\n    return provider\n  }, [])\n\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } =\n    useSelector((state: any) => state.casper.walletConnector);\n\n  const performSwapReverse = async () => {\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    console.log(networkData)\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      setIsSwap(false)\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      setLoading(true)\n      try {\n        if (amount && Number(amount) > 0) {\n          const publicKeyHex = selectedAccount?.address;\n          const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n          const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper'\n          );\n\n          const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(Number(amount) * 100),\n            \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n            \"target_network\": CLValueBuilder.u256(targetNetwork),\n            \"target_token\": CLValueBuilder.string(networkData?.targetToken || targetToken),\n            \"target_address\": CLValueBuilder.string(walletAddress),\n          });\n\n          const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n            'swap_reverse',\n            args\n          );\n\n          const payment = DeployUtil.standardPayment(9000000000);\n\n          const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n          const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n          provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n            const signedDeploy = DeployUtil.setSignature(\n              deploy,\n              signedDeployJson.signature,\n              CLPublicKey.fromHex(publicKeyHex)\n            );\n            // const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n            if (signedDeploy) {\n              const res = await casperClient.putDeploy(signedDeploy);\n              console.log(res, 'resres');\n              setProcessMsg(res)\n              setLoading(false)\n              setShowConfirmation(true)\n            }\n            \n          });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        toast.error(\"An error occured please see console for details\");\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      navigate.push(`/${config._id}`);\n    }\n  };\n\n  console.log(currentWalletNetwork, 'currentWalletNetworkcurrentWalletNetwork')\n  async function swapEvm():Promise<any>{\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    const Api = new crucibleApi()\n    await Api.signInToServer(walletAddress)\n\t\tconst res = await Api.gatewayApi({\n            command: 'swapGetTransaction', data: {\n              amount: amount,\n              targetCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n              currency: networkData?.currency || 'BSC:0xfe00ee6f00dd7ed533157f6250656b4e007e7179'\n          },\n\t\t\tparams: [] });\n    \n    if (res.data.requests) {\n      const helper = new Web3Helper(networkClient)\n      const tx = await helper.sendTransactionAsync(\n        dispatch,\n        res.data.requests\n      )\n      if (tx) {\n\n        const res = await Api.gatewayApi({\n          command: 'logEvmAndNonEvmTransaction', data: {\n            \"id\": tx.split(\"|\")[0],\n            \"sendNetwork\": networkData?.sendNetwork,\n            \"sendAddress\":  `${walletAddress}`,\n            \"receiveAddress\": `${selectedAccount?.address}`,\n            \"sendCurrency\": networkData?.currency || \"BSC:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n            \"sendAmount\": amount,\n            \"receiveCurrency\": `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n        },\n        params: [] });\n        setShowConfirmation(true)\n      }\n    }\n\t}\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n        console.log(balanceUref, 'balanceUrefbalanceUref')\n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        console.log('hellooo')\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;\n    \n    const provider = casperWalletProvider();\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n\n  const performSwap = async () => {\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      setLoading(true)\n      try {\n        if (amount && Number(amount) > 0) {\n          const publicKeyHex = selectedAccount?.address;\n          const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n          const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper'\n          );\n\n          const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(Number(amount) * 100),\n            \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n            \"target_network\": CLValueBuilder.u256(targetNetwork),\n            \"target_token\": CLValueBuilder.string(networkData?.targetToken || targetToken),\n          });\n\n          const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n            'swap',\n            args\n          );\n\n          const payment = DeployUtil.standardPayment(5000000000);\n\n          const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n          const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n          provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n            const signedDeploy = DeployUtil.setSignature(\n              deploy,\n              signedDeployJson.signature,\n              CLPublicKey.fromHex(publicKeyHex)\n            );\n            // const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n            if (signedDeploy) {\n              const res = await casperClient.putDeploy(signedDeploy);\n              console.log(res, 'resres');\n              setProcessMsg(res)\n              setLoading(false)\n              setShowConfirmation(true)\n            }\n            \n          });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        toast.error(\"An error occured please see console for details\");\n        navigate.push(`/${config?._id}`);\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      navigate.push(`/${config._id}`);\n    }\n  };\n\n  const performCasperApproval = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      try {\n        // (selectedAccount?.address, Number(amount));\n        const publicKeyHex = selectedAccount?.address;\n        const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n        const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper'\n        );\n\n        const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(Number(5000000000000000).toFixed()),\n            'spender': setContractHash(`hash-a690c81a73e604c90541b05214b512181cfe457ae393ba68e74b111f66cde3d5`)\n          });\n\n        const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n        decodeBase16('31dbbadf2b6e06be54d834da408469783abe63e404ede27d83e900ed2886f1b6'),\n        'approve',\n        args\n        );\n\n        const payment = DeployUtil.standardPayment(2000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n    \n        provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n            const signedDeploy = DeployUtil.setSignature(\n              deploy,\n              signedDeployJson.signature,\n              CLPublicKey.fromHex(publicKeyHex)\n            );\n\n            if (signedDeploy) {\n                const res = await casperClient.putDeploy(signedDeploy);\n                console.log(res, 'resres');\n                if (res) {\n                \n                }\n                setProcessMsg(res)\n                setLoading(false)\n                setShowConfirmation(true)\n            }\n        });\n          // navigate.push(`/${config._id}`);\n        //toast.success(`${amount} tokens are staked successfully`);\n        \n        } catch (e) {\n          console.log(\"ERROR : \", e);\n            toast.error(\"An error occured please see console for details\");\n            navigate.push(`/${config._id}`);\n        } finally {\n        //setLoading(false)\n        }\n\n    } else {\n        navigate.push(`/${config._id}`);\n    }\n  };\n\n  //@ts-ignore\n  const networkData = networksToChainIdMap[currentWalletNetwork]\n\n  return (\n    <>\n      <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid>\n          <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n            SWAP FROM {networkData?.chain || 'BSC'} TO CASPER\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"AMOUNT TO SWAP\"}\n                placeholder={\"0\"}\n                value={amount}\n                data-testid={\"bsctocasper_input\"}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={'CASPER'}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Token\"}\n                disabled\n                value={targetToken}\n                onChange={(e: any) => {}}\n              />\n              {\n                isConnected ?\n                (\n                  <FButton \n                    title={\"SWAP\"}\n                    className=\"w-100 f-mt-2\"\n                    data-testid={'swap-casper-button'}\n                    onClick={() => swapEvm()}\n                  />\n                )\n                : (\n                  <div className=\"w-100 f-mt-2\">\n                    <MetaMaskConnector.WalletConnector\n                      WalletConnectView={FButton}\n                      WalletConnectModal={ConnectWalletDialog}\n                      isAuthenticationNeeded={false}\n                      WalletConnectViewProps={{ className: \"w-100\" }}\n                    />\n                  </div>\n                )\n              }\n            </FItem>\n          </FGridItem>\n        </FGrid>\n        <ConfirmationDialog\n          amount={amount}\n          onHide={() => {\n            setShowConfirmation(false)\n            setProcessMsg(\"\")\n          }} \n          transaction={processMsg}\n          message={'Transaction sent to network and is processing.'}\n          show={showConfirmation}\n          isSwap={true}\n          network={networkData?.sendNetwork}\n        />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n      </FCard>\n      <div style={{\"zIndex\": isConnected ? 1 : 0, \"width\": \"100%\"}}>\n        <FCard className={`card-staking f-mb-2`}>\n          <FGrid alignX={\"center\"} className=\"f-mb-1\">\n            <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7\"}>\n              SWAP FROM CASPER TO {networkData?.chain || 'BSC'}\n            </FTypo>\n            <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n              <FItem align={\"center\"}>    \n                <FInputText\n                  className={\"f-mt-2\"}\n                  label={\"AMOUNT TO SWAP \"}\n                  placeholder={\"0\"}\n                  value={amount}\n                  onChange={(e: any) => {\n                    e.preventDefault();\n                    const re = /^-?\\d*\\.?\\d*$/;\n                    if (e.target.value === \"\" || re.test(e.target.value)) {\n                      setAmount(e.target.value);\n                    }\n                  }}\n                  postfix={\n                    <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                      TOKEN\n                    </FTypo>\n                  }\n                />\n                <FInputText\n                  className={\"f-mt-2\"}\n                  label={\"Target Network\"}\n                  disabled\n                  value={networkData?.chain}\n                  onChange={(e: any) => {}}\n                />\n                <FInputText\n                  className={\"f-mt-2\"}\n                  label={\"Target Token\"}\n                  disabled\n                  value={targetToken}\n                  onChange={(e: any) => {}}\n                />\n                {\n                  (connection.isWalletConnected && isConnected) && (\n                    <>\n                      <FButton \n                        title={\"SWAP\"}\n                        className=\"w-100 f-mt-2\"\n                        onClick={() => performSwap()}\n                      />\n                      <div className=\"w-100 f-mt-2 flex jc jc-end\" style={{\"cursor\": \"pointer\"}} onClick={() => performCasperApproval()}>Approve</div>\n                    </>\n                  )\n                }\n                {\n                  !connection.isWalletConnected ? \n                    <FButton title={\"Connect Casper Signer\"} className=\"w-100 f-mt-2\" onClick={() => connectWallet()} />\n                  : !isConnected ? (\n                      <div className=\"w-100 f-mt-2\">\n                        <MetaMaskConnector.WalletConnector\n                          WalletConnectView={FButton}\n                          WalletConnectModal={ConnectWalletDialog}\n                          isAuthenticationNeeded={false}\n                          WalletConnectViewProps={{ className: \"w-100\" }}\n                        />\n                      </div>\n                    )\n                  : <></>\n                }\n                {\n                  //     <FButton\n                  //       title={stakingInfo.isStakingOpen ? \"Stake\" : stakingInfo.isEarlyWithdraw ? \"Early Withdraw\" : stakingInfo.isWithdrawOpen ? \"Maturity Withdraw\" : \"Refresh\"}\n                  //       className=\"w-100 f-mt-2\"\n                  //       onClick={() => {\n                  //         // console.log(\"staking\");\n                  //         // dispatch(algorandActions.shouldStake());\n                  //         if (getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isStakingOpen) {\n                  //           // navigate.push(`/${stakingId}/submit-stake`);\n                  //         } else if (\n                  //           getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isEarlyWithdraw ||\n                  //           getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isWithdrawOpen\n                  //         ) {\n                  //           // console.log(stakingId, 'withdrawwww')\n                  //           // navigate.push(`/${stakingId}/submit-withdraw`);\n                  //         } else {\n                  //           window.location.reload();\n                  //         }\n                  //       }}\n                  //     />\n                  //   )\n                  // \n                }\n              </FItem>\n            </FGridItem>\n          </FGrid>\n        </FCard>\n      </div>\n      <ConfirmationDialog\n          amount={amount}\n          onHide={() => {\n            setShowConfirmation(false)\n            setProcessMsg(\"\")\n            console.log(isSwap)\n          }} \n          transaction={processMsg}\n          message={'Transaction sent to network and is processing.'}\n          show={showConfirmation}\n          isSwap={isSwap}\n          network={networkData?.sendNetwork}\n        />\n      <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n    </>\n  );\n};\n\nexport default CasperSwap\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts",["210","211"],[],"//@ts-nocheck\nimport { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\n\nexport const fetchWithdrawals = (withdrawalItems) => async (dispatch) => {\n  dispatch(actions.fetchWithdrawals({ withdrawalItems }));\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.signed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  let data = {}\n  if (config.config.length) {\n    config.config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n\n  data = {\n    ...data,\n    stakingTotal: data?.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n\n  dispatch(actions.configLoaded({ config: data, tokenInfo: config.tokenInfo }));\n};\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx",["212","213","214","215","216","217","218","219","220","221","222","223"],[],"import { CasperClient, CasperServiceByJsonRPC } from \"casper-js-sdk\";\nimport { FDialog, FList, FTruncateText, FTypo, FLink } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"./../assets/images/loaderIcon.svg\";\nimport Success from \"./../assets/images/SuccessIcon.svg\";\nimport Failure from \"./../assets/images/FailureIcon.svg\";\nimport LoaderGif from \"./../assets/images/loading2.gif\";\nimport { crucibleApi } from \"../client\";\nimport { useSelector } from \"react-redux\";\nimport { networksToChainIdMap } from \"../utils/network\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst ConfirmationDialog = ({\n    show,\n    onHide,\n    message,\n    transaction,\n    amount,\n    network = \"BSC_TESTNET\",\n    isSwap = false,\n  }: any) => {\n    const [processing, setProcessing] = useState(false)\n    const [isSuccessful, setIsSuccessful] = useState(false)\n    const [isDone, setIsDone] = useState(false)\n    const [intervalId, setIntervalId] = useState(null as any)\n    const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n    const { walletAddress, currentWalletNetwork } = useSelector((state: any) => state.casper.walletConnector);\n    \n    const checkTransaction = async () => {\n        setProcessing(true)\n        const res = await casperService.getDeployInfo(transaction)\n        if(res.execution_results.length) {\n           //@ts-ignore\n           if(res.execution_results[0].result.Failure) {\n            //@ts-ignore\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(false)\n           }\n           //@ts-ignore\n           if(res.execution_results[0].result.Success) {\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(true)\n            //@ts-ignore\n            const networkData = networksToChainIdMap[currentWalletNetwork]\n            if (isSwap) {\n              const Api = new crucibleApi()\n              await Api.signInToServer(walletAddress)\n              const logTransaction = await Api.gatewayApi({\n                command: 'logCsprTransaction', data: {\n                  receiveNetwork: networkData.sendNetwork,\n                  sendAmount: amount,\n                  sendAddress: `${selectedAccount?.address}`,\n                  receiveAddress: walletAddress,\n                  sendNetwork: '109090',\n                  sendTimestamp: Date.now(),\n                  sendCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n                  receiveCurrency: `${networkData.sendCurrency}`,\n                  creator: `cspr:${selectedAccount?.address}`,\n                  id: transaction\n              }, params: [] });\n            }\n           \n           }\n        }\n    }\n    useEffect(() => {\n        if (transaction && !isDone) {\n          let intervalId = setInterval(\n            () =>  checkTransaction()\n          , 5000)\n          setIntervalId(intervalId)\n        }\n\n        if (transaction && isDone) {\n          clearInterval(intervalId)\n        }\n    }, [transaction, isDone])\n\n    useEffect(() => {\n      return () => {\n        setIsDone(false)\n        setIsSuccessful(false)\n        setProcessing(false)\n      }\n    }, [])\n\n    return (\n      <FDialog\n        variant={\"dark\"}\n        size={\"medium\"}\n        onHide={() => {\n          onHide()\n          setIsDone(false)\n          setProcessing(false)\n          setIsSuccessful(false)\n        }}\n        show={show}\n        className=\"connect-wallet-dialog text-center\"\n        showClose={true}\n        title={\"\"}\n      >\n        <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n          {\n            isDone && transaction ?\n              isSuccessful ?\n                <img src={Success} width={\"120px\"} />\n              : <img src={Failure} width={\"120px\"} />\n            : transaction && processing ?\n              <img src={LoaderGif} width={\"120px\"} />\n            : <img src={Loader} width={\"120px\"} />\n          }\n          <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> \n            {\n              isDone && transaction ?\n               isSuccessful ?\n                  ('Transaction processed successfully')\n               : ('Transaction failed on chain')\n              :  (message || 'Loading')\n            }\n          </FTypo>\n          <a href={`https://cspr.live/deploy/${transaction}`} target=\"_blank\" style={{\"color\": \"white\"}}>\n            <FTypo size={15} className={\"f-mb--5 f-mt--9\"}>\n              <FTruncateText text={transaction} />\n            </FTypo>\n          </a>\n        </FList>\n        {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n      </FDialog>\n    );\n  };\n  \nexport default ConfirmationDialog\n  ","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx",["224","225"],[],"import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FLoader,\n  FTypo,\n} from \"ferrum-design-system\";\nimport Loader from \"./../assets/images/loading2.gif\";\n\nconst TxProcessingDialog = ({\n  show,\n  showClose = true,\n  onHide,\n  message\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"medium\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={showClose}\n      title={\"\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        <img src={Loader} width={\"170px\"} />\n        <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> {message || 'Loading'} </FTypo>\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default TxProcessingDialog;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts",["226","227"],[],"import { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport axios from \"axios\";\n\nexport class crucibleApi {\n  jwtToken = \"\";\n  address = \"\"\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n}\n\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx",["228"],["229","230","231","232","233","234"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WalletConnectorProps } from \"./walletConnectorInterfaces\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport Web3 from \"web3\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\n\nexport const WalletConnector = ({\n  WalletConnectView,\n  WalletConnectModal, \n  WalletConnectViewProps,\n}: WalletConnectorProps) => {\n  const [showWalletDialog, setShowWalletDialog] = useState<boolean>(false);\n  const [reconnect, setReconnect] = useState<boolean>(false);\n  const [networkClient, setNetworkClient] = useState<Web3 | undefined>(\n    undefined\n  );\n  const state =  useSelector((state: RootState) => state);\n\n  const dispatch = useDispatch();\n  const { active, activate, deactivate, library, account, chainId, error } =\n    useWeb3React();\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress } =\n    useSelector((state: any) => state.casper.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken,\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector((state: any) => state.casper.walletAuthenticator);\n\n  \n  useEffect(() => {\n    if (\n      account &&\n      walletAddress &&\n      walletAddress !== account &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        // console.log(isAuthorized, active, \"isAuthorized\");\n        if (isAuthorized && !active && !error && isConnected) {\n          activate(injected);\n        }\n      })\n      .catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n\n  useEffect(() => {\n    if (\n      chainId &&\n      currentWalletNetwork &&\n      currentWalletNetwork !== chainId &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n\n  useEffect(() => {\n    if (\n      active &&\n      networkClient &&\n      library &&\n      !isConnected &&\n      account &&\n      chainId &&\n      isConnecting\n    ) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth\n        .getBalance(account?.toString())\n        .then((balance) => {\n          // console.log(\n          //   \"newtork ping completed successfully update redux with wallet and network client information\",\n          //   balance,\n          //   account?.toString()\n          // );\n          dispatch(\n            walletConnectorActions.walletConnected({\n              chainId,\n              account,\n              balance,\n              currentWallet: undefined,\n              networkClient,\n            })\n          );\n        })\n        .catch((err) => {\n          // console.log(\"newtork ping failed reset wallet state\");\n          // console.log(err, \" : error connecting wallet\");\n          toast.error(err || \"Error connecting wallet\");\n          dispatch(walletConnectorActions.resetWalletConnector());\n        });\n    }\n    // eslint-disable-next-line\n  }, [\n    networkClient,\n    library,\n    isConnected,\n    active,\n    account,\n    chainId,\n    isConnecting,\n  ]);\n\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(\n          walletAuthenticatorActions.resetWalletAuthentication({\n            userToken: applicationUserToken,\n          })\n        );\n        dispatch(\n          walletAuthenticatorActions.removeSession({\n            userToken: applicationUserToken,\n          })\n        );\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n    }\n  };\n\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      toast.error(error?.message || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n\n  return (\n    <>\n      <WalletConnectView\n        {...{\n          ...WalletConnectViewProps,\n          prefix: {\n            ...(isConnecting ? (\n              <AiOutlineLoading3Quarters />\n            ) : !isConnected ? (\n              <VscDebugDisconnect />\n            ) : (\n              <AiOutlineDisconnect />\n            )),\n          },\n\n          title: isConnecting\n            ? \"Connecting...\"\n            : !isConnected\n            ? \"Connect to Metamask\"\n            : \"Disconnect\",\n          disabled: isConnecting,\n        }}\n        onClick={() => {\n          openWalletSelectorDialog();\n        }}\n      />\n      <WalletConnectModal\n        show={showWalletDialog}\n        metaMaskClickEvent={() => {\n          connectMetaMask();\n        }}\n        onHide={() => setShowWalletDialog(false)}\n      />\n      {/* { isAuthenticationNeeded && <WalletAuthencationOnSignIn account={account} networkClient={networkClient} isAuthenticationNeeded={isAuthenticationNeeded} /> } */}\n    </>\n  );\n};\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx",[],["235"],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts",[],[],{"ruleId":"236","severity":1,"message":"237","line":4,"column":19,"nodeType":"238","messageId":"239","endLine":4,"endColumn":24},{"ruleId":"236","severity":1,"message":"240","line":8,"column":8,"nodeType":"238","messageId":"239","endLine":8,"endColumn":14},{"ruleId":"236","severity":1,"message":"241","line":1,"column":32,"nodeType":"238","messageId":"239","endLine":1,"endColumn":39},{"ruleId":"236","severity":1,"message":"242","line":8,"column":10,"nodeType":"238","messageId":"239","endLine":8,"endColumn":26},{"ruleId":"236","severity":1,"message":"243","line":9,"column":8,"nodeType":"238","messageId":"239","endLine":9,"endColumn":18},{"ruleId":"236","severity":1,"message":"244","line":15,"column":47,"nodeType":"238","messageId":"239","endLine":15,"endColumn":54},{"ruleId":"236","severity":1,"message":"245","line":20,"column":5,"nodeType":"238","messageId":"239","endLine":20,"endColumn":11},{"ruleId":"236","severity":1,"message":"246","line":33,"column":7,"nodeType":"238","messageId":"239","endLine":33,"endColumn":20},{"ruleId":"247","severity":1,"message":"248","line":167,"column":8,"nodeType":"249","endLine":167,"endColumn":40,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":193,"column":37,"nodeType":"253","messageId":"254","endLine":193,"endColumn":39},{"ruleId":"236","severity":1,"message":"255","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":26},{"ruleId":"236","severity":1,"message":"256","line":15,"column":10,"nodeType":"238","messageId":"239","endLine":15,"endColumn":22},{"ruleId":"236","severity":1,"message":"257","line":28,"column":7,"nodeType":"238","messageId":"239","endLine":28,"endColumn":17},{"ruleId":"236","severity":1,"message":"258","line":34,"column":11,"nodeType":"238","messageId":"239","endLine":34,"endColumn":28},{"ruleId":"236","severity":1,"message":"259","line":89,"column":17,"nodeType":"238","messageId":"239","endLine":89,"endColumn":24},{"ruleId":"236","severity":1,"message":"260","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":24},{"ruleId":"236","severity":1,"message":"261","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":23},{"ruleId":"236","severity":1,"message":"244","line":8,"column":47,"nodeType":"238","messageId":"239","endLine":8,"endColumn":54},{"ruleId":"236","severity":1,"message":"245","line":13,"column":3,"nodeType":"238","messageId":"239","endLine":13,"endColumn":9},{"ruleId":"236","severity":1,"message":"258","line":33,"column":11,"nodeType":"238","messageId":"239","endLine":33,"endColumn":28},{"ruleId":"236","severity":1,"message":"262","line":38,"column":25,"nodeType":"238","messageId":"239","endLine":38,"endColumn":41},{"ruleId":"236","severity":1,"message":"263","line":39,"column":23,"nodeType":"238","messageId":"239","endLine":39,"endColumn":37},{"ruleId":"236","severity":1,"message":"264","line":44,"column":66,"nodeType":"238","messageId":"239","endLine":44,"endColumn":81},{"ruleId":"236","severity":1,"message":"265","line":44,"column":83,"nodeType":"238","messageId":"239","endLine":44,"endColumn":90},{"ruleId":"236","severity":1,"message":"266","line":53,"column":24,"nodeType":"238","messageId":"239","endLine":53,"endColumn":36},{"ruleId":"236","severity":1,"message":"267","line":56,"column":9,"nodeType":"238","messageId":"239","endLine":56,"endColumn":27},{"ruleId":"236","severity":1,"message":"268","line":153,"column":15,"nodeType":"238","messageId":"239","endLine":153,"endColumn":18},{"ruleId":"236","severity":1,"message":"259","line":189,"column":17,"nodeType":"238","messageId":"239","endLine":189,"endColumn":24},{"ruleId":"269","severity":1,"message":"270","line":61,"column":5,"nodeType":"271","messageId":"254","endLine":61,"endColumn":16},{"ruleId":"269","severity":1,"message":"272","line":62,"column":5,"nodeType":"271","messageId":"254","endLine":62,"endColumn":18},{"ruleId":"236","severity":1,"message":"273","line":2,"column":48,"nodeType":"238","messageId":"239","endLine":2,"endColumn":53},{"ruleId":"236","severity":1,"message":"274","line":15,"column":7,"nodeType":"238","messageId":"239","endLine":15,"endColumn":19},{"ruleId":"236","severity":1,"message":"275","line":30,"column":24,"nodeType":"238","messageId":"239","endLine":30,"endColumn":30},{"ruleId":"236","severity":1,"message":"276","line":30,"column":49,"nodeType":"238","messageId":"239","endLine":30,"endColumn":66},{"ruleId":"236","severity":1,"message":"264","line":30,"column":68,"nodeType":"238","messageId":"239","endLine":30,"endColumn":83},{"ruleId":"236","severity":1,"message":"277","line":54,"column":21,"nodeType":"238","messageId":"239","endLine":54,"endColumn":35},{"ruleId":"247","severity":1,"message":"278","line":83,"column":8,"nodeType":"249","endLine":83,"endColumn":29,"suggestions":"279"},{"ruleId":"280","severity":1,"message":"281","line":112,"column":17,"nodeType":"282","endLine":112,"endColumn":54},{"ruleId":"280","severity":1,"message":"281","line":113,"column":17,"nodeType":"282","endLine":113,"endColumn":54},{"ruleId":"280","severity":1,"message":"281","line":115,"column":15,"nodeType":"282","endLine":115,"endColumn":54},{"ruleId":"280","severity":1,"message":"281","line":116,"column":15,"nodeType":"282","endLine":116,"endColumn":51},{"ruleId":"283","severity":1,"message":"284","line":127,"column":11,"nodeType":"282","messageId":"285","endLine":127,"endColumn":106,"fix":"286"},{"ruleId":"236","severity":1,"message":"287","line":6,"column":3,"nodeType":"238","messageId":"239","endLine":6,"endColumn":10},{"ruleId":"280","severity":1,"message":"281","line":28,"column":9,"nodeType":"282","endLine":28,"endColumn":45},{"ruleId":"236","severity":1,"message":"288","line":1,"column":10,"nodeType":"238","messageId":"239","endLine":1,"endColumn":18},{"ruleId":"236","severity":1,"message":"289","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":19},{"ruleId":"236","severity":1,"message":"290","line":25,"column":9,"nodeType":"238","messageId":"239","endLine":25,"endColumn":14},{"ruleId":"247","severity":1,"message":"291","line":52,"column":6,"nodeType":"249","endLine":52,"endColumn":51,"suggestions":"292","suppressions":"293"},{"ruleId":"247","severity":1,"message":"291","line":80,"column":6,"nodeType":"249","endLine":80,"endColumn":58,"suggestions":"294","suppressions":"295"},{"ruleId":"247","severity":1,"message":"296","line":94,"column":6,"nodeType":"249","endLine":94,"endColumn":65,"suggestions":"297","suppressions":"298"},{"ruleId":"247","severity":1,"message":"299","line":106,"column":6,"nodeType":"249","endLine":106,"endColumn":25,"suggestions":"300","suppressions":"301"},{"ruleId":"247","severity":1,"message":"299","line":147,"column":6,"nodeType":"249","endLine":155,"endColumn":4,"suggestions":"302","suppressions":"303"},{"ruleId":"247","severity":1,"message":"299","line":201,"column":6,"nodeType":"249","endLine":201,"endColumn":13,"suggestions":"304","suppressions":"305"},{"ruleId":"247","severity":1,"message":"306","line":57,"column":6,"nodeType":"249","endLine":57,"endColumn":45,"suggestions":"307","suppressions":"308"},"@typescript-eslint/no-unused-vars","'FMain' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'FHeader' is defined but never used.","'CasperWithdrawal' is defined but never used.","'FerrumJson' is defined but never used.","'CLValue' is defined but never used.","'Signer' is defined but never used.","'casperService' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEvmWithdrawalItems'. Either include it or remove the dependency array.","ArrayExpression",["309"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'CasperClient' is defined but never used.","'STATUS_API' is assigned a value but never used.","'bridgePoolAddress' is assigned a value but never used.","'balance' is assigned a value but never used.","'getStakingInfo' is defined but never used.","'connectWallet' is defined but never used.","'setTargetNetwork' is assigned a value but never used.","'setTargetToken' is assigned a value but never used.","'signedAddresses' is assigned a value but never used.","'network' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'performSwapReverse' is assigned a value but never used.","'res' is assigned a value but never used.","no-dupe-keys","Duplicate key 'stakingEnds'.","ObjectExpression","Duplicate key 'stakingStarts'.","'FLink' is defined but never used.","'casperClient' is assigned a value but never used.","'config' is assigned a value but never used.","'isWalletConnected' is assigned a value but never used.","'logTransaction' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkTransaction' and 'intervalId'. Either include them or remove the dependency array.",["310"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"311","text":"312"},"'FLoader' is defined but never used.","'Dispatch' is defined but never used.","'AnyAction' is defined but never used.","'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["313"],["314"],["315"],["316"],"React Hook useEffect has missing dependencies: 'activate' and 'dispatch'. Either include them or remove the dependency array.",["317"],["318"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["319"],["320"],["321"],["322"],["323"],["324"],"React Hook useEffect has missing dependencies: 'dispatch', 'isWeb3Initialized', 'networkClient', and 'signIntoServer'. Either include them or remove the dependency array.",["325"],["326"],{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},[4635,4635]," rel=\"noreferrer\"",{"desc":"331","fix":"332"},{"kind":"333","justification":"334"},{"desc":"335","fix":"336"},{"kind":"333","justification":"334"},{"desc":"337","fix":"338"},{"kind":"333","justification":"334"},{"desc":"339","fix":"340"},{"kind":"333","justification":"334"},{"desc":"341","fix":"342"},{"kind":"333","justification":"334"},{"desc":"343","fix":"344"},{"kind":"333","justification":"334"},{"desc":"345","fix":"346"},{"kind":"333","justification":"334"},"Update the dependencies array to be: [fetchEvmWithdrawalItems, selectedAccount, walletAddress]",{"range":"347","text":"348"},"Update the dependencies array to be: [transaction, isDone, checkTransaction, intervalId]",{"range":"349","text":"350"},"Update the dependencies array to be: [walletAddress, account, isConnected, active, activate]",{"range":"351","text":"352"},"directive","","Update the dependencies array to be: [currentWalletNetwork, chainId, isConnected, active, activate]",{"range":"353","text":"354"},"Update the dependencies array to be: [isConnected, active, library, isConnecting, networkClient, dispatch, activate]",{"range":"355","text":"356"},"Update the dependencies array to be: [reconnect, active, dispatch]",{"range":"357","text":"358"},"Update the dependencies array to be: [networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",{"range":"359","text":"360"},"Update the dependencies array to be: [dispatch, error]",{"range":"361","text":"362"},"Update the dependencies array to be: [dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]",{"range":"363","text":"364"},[6798,6830],"[fetchEvmWithdrawalItems, selectedAccount, walletAddress]",[3276,3297],"[transaction, isDone, checkTransaction, intervalId]",[1994,2039],"[walletAddress, account, isConnected, active, activate]",[2719,2771],"[currentWalletNetwork, chainId, isConnected, active, activate]",[3254,3313],"[isConnected, active, library, isConnecting, networkClient, dispatch, activate]",[3654,3673],"[reconnect, active, dispatch]",[4863,4973],"[networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",[6199,6206],"[dispatch, error]",[1692,1731],"[dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]"]